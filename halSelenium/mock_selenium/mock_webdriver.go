// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tebeka/selenium (interfaces: WebDriver)

// Package mock_selenium is a generated GoMock package.
package mock_selenium

import (
	gomock "github.com/golang/mock/gomock"
	selenium "github.com/tebeka/selenium"
	log "github.com/tebeka/selenium/log"
	reflect "reflect"
	time "time"
)

// MockWebDriver is a mock of WebDriver interface
type MockWebDriver struct {
	ctrl     *gomock.Controller
	recorder *MockWebDriverMockRecorder
}

// MockWebDriverMockRecorder is the mock recorder for MockWebDriver
type MockWebDriverMockRecorder struct {
	mock *MockWebDriver
}

// NewMockWebDriver creates a new mock instance
func NewMockWebDriver(ctrl *gomock.Controller) *MockWebDriver {
	mock := &MockWebDriver{ctrl: ctrl}
	mock.recorder = &MockWebDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWebDriver) EXPECT() *MockWebDriverMockRecorder {
	return m.recorder
}

// AcceptAlert mocks base method
func (m *MockWebDriver) AcceptAlert() error {
	ret := m.ctrl.Call(m, "AcceptAlert")
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptAlert indicates an expected call of AcceptAlert
func (mr *MockWebDriverMockRecorder) AcceptAlert() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptAlert", reflect.TypeOf((*MockWebDriver)(nil).AcceptAlert))
}

// ActiveElement mocks base method
func (m *MockWebDriver) ActiveElement() (selenium.WebElement, error) {
	ret := m.ctrl.Call(m, "ActiveElement")
	ret0, _ := ret[0].(selenium.WebElement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActiveElement indicates an expected call of ActiveElement
func (mr *MockWebDriverMockRecorder) ActiveElement() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveElement", reflect.TypeOf((*MockWebDriver)(nil).ActiveElement))
}

// AddCookie mocks base method
func (m *MockWebDriver) AddCookie(arg0 *selenium.Cookie) error {
	ret := m.ctrl.Call(m, "AddCookie", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCookie indicates an expected call of AddCookie
func (mr *MockWebDriverMockRecorder) AddCookie(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCookie", reflect.TypeOf((*MockWebDriver)(nil).AddCookie), arg0)
}

// AlertText mocks base method
func (m *MockWebDriver) AlertText() (string, error) {
	ret := m.ctrl.Call(m, "AlertText")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AlertText indicates an expected call of AlertText
func (mr *MockWebDriverMockRecorder) AlertText() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlertText", reflect.TypeOf((*MockWebDriver)(nil).AlertText))
}

// Back mocks base method
func (m *MockWebDriver) Back() error {
	ret := m.ctrl.Call(m, "Back")
	ret0, _ := ret[0].(error)
	return ret0
}

// Back indicates an expected call of Back
func (mr *MockWebDriverMockRecorder) Back() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Back", reflect.TypeOf((*MockWebDriver)(nil).Back))
}

// ButtonDown mocks base method
func (m *MockWebDriver) ButtonDown() error {
	ret := m.ctrl.Call(m, "ButtonDown")
	ret0, _ := ret[0].(error)
	return ret0
}

// ButtonDown indicates an expected call of ButtonDown
func (mr *MockWebDriverMockRecorder) ButtonDown() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ButtonDown", reflect.TypeOf((*MockWebDriver)(nil).ButtonDown))
}

// ButtonUp mocks base method
func (m *MockWebDriver) ButtonUp() error {
	ret := m.ctrl.Call(m, "ButtonUp")
	ret0, _ := ret[0].(error)
	return ret0
}

// ButtonUp indicates an expected call of ButtonUp
func (mr *MockWebDriverMockRecorder) ButtonUp() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ButtonUp", reflect.TypeOf((*MockWebDriver)(nil).ButtonUp))
}

// Capabilities mocks base method
func (m *MockWebDriver) Capabilities() (selenium.Capabilities, error) {
	ret := m.ctrl.Call(m, "Capabilities")
	ret0, _ := ret[0].(selenium.Capabilities)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Capabilities indicates an expected call of Capabilities
func (mr *MockWebDriverMockRecorder) Capabilities() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Capabilities", reflect.TypeOf((*MockWebDriver)(nil).Capabilities))
}

// Click mocks base method
func (m *MockWebDriver) Click(arg0 int) error {
	ret := m.ctrl.Call(m, "Click", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Click indicates an expected call of Click
func (mr *MockWebDriverMockRecorder) Click(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Click", reflect.TypeOf((*MockWebDriver)(nil).Click), arg0)
}

// Close mocks base method
func (m *MockWebDriver) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockWebDriverMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWebDriver)(nil).Close))
}

// CloseWindow mocks base method
func (m *MockWebDriver) CloseWindow(arg0 string) error {
	ret := m.ctrl.Call(m, "CloseWindow", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseWindow indicates an expected call of CloseWindow
func (mr *MockWebDriverMockRecorder) CloseWindow(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseWindow", reflect.TypeOf((*MockWebDriver)(nil).CloseWindow), arg0)
}

// CurrentURL mocks base method
func (m *MockWebDriver) CurrentURL() (string, error) {
	ret := m.ctrl.Call(m, "CurrentURL")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentURL indicates an expected call of CurrentURL
func (mr *MockWebDriverMockRecorder) CurrentURL() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentURL", reflect.TypeOf((*MockWebDriver)(nil).CurrentURL))
}

// CurrentWindowHandle mocks base method
func (m *MockWebDriver) CurrentWindowHandle() (string, error) {
	ret := m.ctrl.Call(m, "CurrentWindowHandle")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentWindowHandle indicates an expected call of CurrentWindowHandle
func (mr *MockWebDriverMockRecorder) CurrentWindowHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentWindowHandle", reflect.TypeOf((*MockWebDriver)(nil).CurrentWindowHandle))
}

// DecodeElement mocks base method
func (m *MockWebDriver) DecodeElement(arg0 []byte) (selenium.WebElement, error) {
	ret := m.ctrl.Call(m, "DecodeElement", arg0)
	ret0, _ := ret[0].(selenium.WebElement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeElement indicates an expected call of DecodeElement
func (mr *MockWebDriverMockRecorder) DecodeElement(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeElement", reflect.TypeOf((*MockWebDriver)(nil).DecodeElement), arg0)
}

// DecodeElements mocks base method
func (m *MockWebDriver) DecodeElements(arg0 []byte) ([]selenium.WebElement, error) {
	ret := m.ctrl.Call(m, "DecodeElements", arg0)
	ret0, _ := ret[0].([]selenium.WebElement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeElements indicates an expected call of DecodeElements
func (mr *MockWebDriverMockRecorder) DecodeElements(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeElements", reflect.TypeOf((*MockWebDriver)(nil).DecodeElements), arg0)
}

// DeleteAllCookies mocks base method
func (m *MockWebDriver) DeleteAllCookies() error {
	ret := m.ctrl.Call(m, "DeleteAllCookies")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllCookies indicates an expected call of DeleteAllCookies
func (mr *MockWebDriverMockRecorder) DeleteAllCookies() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllCookies", reflect.TypeOf((*MockWebDriver)(nil).DeleteAllCookies))
}

// DeleteCookie mocks base method
func (m *MockWebDriver) DeleteCookie(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteCookie", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCookie indicates an expected call of DeleteCookie
func (mr *MockWebDriverMockRecorder) DeleteCookie(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCookie", reflect.TypeOf((*MockWebDriver)(nil).DeleteCookie), arg0)
}

// DismissAlert mocks base method
func (m *MockWebDriver) DismissAlert() error {
	ret := m.ctrl.Call(m, "DismissAlert")
	ret0, _ := ret[0].(error)
	return ret0
}

// DismissAlert indicates an expected call of DismissAlert
func (mr *MockWebDriverMockRecorder) DismissAlert() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DismissAlert", reflect.TypeOf((*MockWebDriver)(nil).DismissAlert))
}

// DoubleClick mocks base method
func (m *MockWebDriver) DoubleClick() error {
	ret := m.ctrl.Call(m, "DoubleClick")
	ret0, _ := ret[0].(error)
	return ret0
}

// DoubleClick indicates an expected call of DoubleClick
func (mr *MockWebDriverMockRecorder) DoubleClick() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoubleClick", reflect.TypeOf((*MockWebDriver)(nil).DoubleClick))
}

// ExecuteScript mocks base method
func (m *MockWebDriver) ExecuteScript(arg0 string, arg1 []interface{}) (interface{}, error) {
	ret := m.ctrl.Call(m, "ExecuteScript", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteScript indicates an expected call of ExecuteScript
func (mr *MockWebDriverMockRecorder) ExecuteScript(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteScript", reflect.TypeOf((*MockWebDriver)(nil).ExecuteScript), arg0, arg1)
}

// ExecuteScriptAsync mocks base method
func (m *MockWebDriver) ExecuteScriptAsync(arg0 string, arg1 []interface{}) (interface{}, error) {
	ret := m.ctrl.Call(m, "ExecuteScriptAsync", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteScriptAsync indicates an expected call of ExecuteScriptAsync
func (mr *MockWebDriverMockRecorder) ExecuteScriptAsync(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteScriptAsync", reflect.TypeOf((*MockWebDriver)(nil).ExecuteScriptAsync), arg0, arg1)
}

// ExecuteScriptAsyncRaw mocks base method
func (m *MockWebDriver) ExecuteScriptAsyncRaw(arg0 string, arg1 []interface{}) ([]byte, error) {
	ret := m.ctrl.Call(m, "ExecuteScriptAsyncRaw", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteScriptAsyncRaw indicates an expected call of ExecuteScriptAsyncRaw
func (mr *MockWebDriverMockRecorder) ExecuteScriptAsyncRaw(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteScriptAsyncRaw", reflect.TypeOf((*MockWebDriver)(nil).ExecuteScriptAsyncRaw), arg0, arg1)
}

// ExecuteScriptRaw mocks base method
func (m *MockWebDriver) ExecuteScriptRaw(arg0 string, arg1 []interface{}) ([]byte, error) {
	ret := m.ctrl.Call(m, "ExecuteScriptRaw", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteScriptRaw indicates an expected call of ExecuteScriptRaw
func (mr *MockWebDriverMockRecorder) ExecuteScriptRaw(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteScriptRaw", reflect.TypeOf((*MockWebDriver)(nil).ExecuteScriptRaw), arg0, arg1)
}

// FindElement mocks base method
func (m *MockWebDriver) FindElement(arg0, arg1 string) (selenium.WebElement, error) {
	ret := m.ctrl.Call(m, "FindElement", arg0, arg1)
	ret0, _ := ret[0].(selenium.WebElement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindElement indicates an expected call of FindElement
func (mr *MockWebDriverMockRecorder) FindElement(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindElement", reflect.TypeOf((*MockWebDriver)(nil).FindElement), arg0, arg1)
}

// FindElements mocks base method
func (m *MockWebDriver) FindElements(arg0, arg1 string) ([]selenium.WebElement, error) {
	ret := m.ctrl.Call(m, "FindElements", arg0, arg1)
	ret0, _ := ret[0].([]selenium.WebElement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindElements indicates an expected call of FindElements
func (mr *MockWebDriverMockRecorder) FindElements(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindElements", reflect.TypeOf((*MockWebDriver)(nil).FindElements), arg0, arg1)
}

// Forward mocks base method
func (m *MockWebDriver) Forward() error {
	ret := m.ctrl.Call(m, "Forward")
	ret0, _ := ret[0].(error)
	return ret0
}

// Forward indicates an expected call of Forward
func (mr *MockWebDriverMockRecorder) Forward() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Forward", reflect.TypeOf((*MockWebDriver)(nil).Forward))
}

// Get mocks base method
func (m *MockWebDriver) Get(arg0 string) error {
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockWebDriverMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockWebDriver)(nil).Get), arg0)
}

// GetCookie mocks base method
func (m *MockWebDriver) GetCookie(arg0 string) (selenium.Cookie, error) {
	ret := m.ctrl.Call(m, "GetCookie", arg0)
	ret0, _ := ret[0].(selenium.Cookie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCookie indicates an expected call of GetCookie
func (mr *MockWebDriverMockRecorder) GetCookie(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCookie", reflect.TypeOf((*MockWebDriver)(nil).GetCookie), arg0)
}

// GetCookies mocks base method
func (m *MockWebDriver) GetCookies() ([]selenium.Cookie, error) {
	ret := m.ctrl.Call(m, "GetCookies")
	ret0, _ := ret[0].([]selenium.Cookie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCookies indicates an expected call of GetCookies
func (mr *MockWebDriverMockRecorder) GetCookies() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCookies", reflect.TypeOf((*MockWebDriver)(nil).GetCookies))
}

// KeyDown mocks base method
func (m *MockWebDriver) KeyDown(arg0 string) error {
	ret := m.ctrl.Call(m, "KeyDown", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// KeyDown indicates an expected call of KeyDown
func (mr *MockWebDriverMockRecorder) KeyDown(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyDown", reflect.TypeOf((*MockWebDriver)(nil).KeyDown), arg0)
}

// KeyUp mocks base method
func (m *MockWebDriver) KeyUp(arg0 string) error {
	ret := m.ctrl.Call(m, "KeyUp", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// KeyUp indicates an expected call of KeyUp
func (mr *MockWebDriverMockRecorder) KeyUp(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyUp", reflect.TypeOf((*MockWebDriver)(nil).KeyUp), arg0)
}

// Log mocks base method
func (m *MockWebDriver) Log(arg0 log.Type) ([]log.Message, error) {
	ret := m.ctrl.Call(m, "Log", arg0)
	ret0, _ := ret[0].([]log.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Log indicates an expected call of Log
func (mr *MockWebDriverMockRecorder) Log(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockWebDriver)(nil).Log), arg0)
}

// MaximizeWindow mocks base method
func (m *MockWebDriver) MaximizeWindow(arg0 string) error {
	ret := m.ctrl.Call(m, "MaximizeWindow", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// MaximizeWindow indicates an expected call of MaximizeWindow
func (mr *MockWebDriverMockRecorder) MaximizeWindow(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaximizeWindow", reflect.TypeOf((*MockWebDriver)(nil).MaximizeWindow), arg0)
}

// NewSession mocks base method
func (m *MockWebDriver) NewSession() (string, error) {
	ret := m.ctrl.Call(m, "NewSession")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewSession indicates an expected call of NewSession
func (mr *MockWebDriverMockRecorder) NewSession() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSession", reflect.TypeOf((*MockWebDriver)(nil).NewSession))
}

// PageSource mocks base method
func (m *MockWebDriver) PageSource() (string, error) {
	ret := m.ctrl.Call(m, "PageSource")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PageSource indicates an expected call of PageSource
func (mr *MockWebDriverMockRecorder) PageSource() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PageSource", reflect.TypeOf((*MockWebDriver)(nil).PageSource))
}

// Quit mocks base method
func (m *MockWebDriver) Quit() error {
	ret := m.ctrl.Call(m, "Quit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Quit indicates an expected call of Quit
func (mr *MockWebDriverMockRecorder) Quit() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Quit", reflect.TypeOf((*MockWebDriver)(nil).Quit))
}

// Refresh mocks base method
func (m *MockWebDriver) Refresh() error {
	ret := m.ctrl.Call(m, "Refresh")
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh
func (mr *MockWebDriverMockRecorder) Refresh() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockWebDriver)(nil).Refresh))
}

// ResizeWindow mocks base method
func (m *MockWebDriver) ResizeWindow(arg0 string, arg1, arg2 int) error {
	ret := m.ctrl.Call(m, "ResizeWindow", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResizeWindow indicates an expected call of ResizeWindow
func (mr *MockWebDriverMockRecorder) ResizeWindow(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResizeWindow", reflect.TypeOf((*MockWebDriver)(nil).ResizeWindow), arg0, arg1, arg2)
}

// Screenshot mocks base method
func (m *MockWebDriver) Screenshot() ([]byte, error) {
	ret := m.ctrl.Call(m, "Screenshot")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Screenshot indicates an expected call of Screenshot
func (mr *MockWebDriverMockRecorder) Screenshot() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Screenshot", reflect.TypeOf((*MockWebDriver)(nil).Screenshot))
}

// SendModifier mocks base method
func (m *MockWebDriver) SendModifier(arg0 string, arg1 bool) error {
	ret := m.ctrl.Call(m, "SendModifier", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendModifier indicates an expected call of SendModifier
func (mr *MockWebDriverMockRecorder) SendModifier(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendModifier", reflect.TypeOf((*MockWebDriver)(nil).SendModifier), arg0, arg1)
}

// SessionID mocks base method
func (m *MockWebDriver) SessionID() string {
	ret := m.ctrl.Call(m, "SessionID")
	ret0, _ := ret[0].(string)
	return ret0
}

// SessionID indicates an expected call of SessionID
func (mr *MockWebDriverMockRecorder) SessionID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionID", reflect.TypeOf((*MockWebDriver)(nil).SessionID))
}

// SessionId mocks base method
func (m *MockWebDriver) SessionId() string {
	ret := m.ctrl.Call(m, "SessionId")
	ret0, _ := ret[0].(string)
	return ret0
}

// SessionId indicates an expected call of SessionId
func (mr *MockWebDriverMockRecorder) SessionId() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionId", reflect.TypeOf((*MockWebDriver)(nil).SessionId))
}

// SetAlertText mocks base method
func (m *MockWebDriver) SetAlertText(arg0 string) error {
	ret := m.ctrl.Call(m, "SetAlertText", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAlertText indicates an expected call of SetAlertText
func (mr *MockWebDriverMockRecorder) SetAlertText(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAlertText", reflect.TypeOf((*MockWebDriver)(nil).SetAlertText), arg0)
}

// SetAsyncScriptTimeout mocks base method
func (m *MockWebDriver) SetAsyncScriptTimeout(arg0 time.Duration) error {
	ret := m.ctrl.Call(m, "SetAsyncScriptTimeout", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAsyncScriptTimeout indicates an expected call of SetAsyncScriptTimeout
func (mr *MockWebDriverMockRecorder) SetAsyncScriptTimeout(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAsyncScriptTimeout", reflect.TypeOf((*MockWebDriver)(nil).SetAsyncScriptTimeout), arg0)
}

// SetImplicitWaitTimeout mocks base method
func (m *MockWebDriver) SetImplicitWaitTimeout(arg0 time.Duration) error {
	ret := m.ctrl.Call(m, "SetImplicitWaitTimeout", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetImplicitWaitTimeout indicates an expected call of SetImplicitWaitTimeout
func (mr *MockWebDriverMockRecorder) SetImplicitWaitTimeout(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetImplicitWaitTimeout", reflect.TypeOf((*MockWebDriver)(nil).SetImplicitWaitTimeout), arg0)
}

// SetPageLoadTimeout mocks base method
func (m *MockWebDriver) SetPageLoadTimeout(arg0 time.Duration) error {
	ret := m.ctrl.Call(m, "SetPageLoadTimeout", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPageLoadTimeout indicates an expected call of SetPageLoadTimeout
func (mr *MockWebDriverMockRecorder) SetPageLoadTimeout(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPageLoadTimeout", reflect.TypeOf((*MockWebDriver)(nil).SetPageLoadTimeout), arg0)
}

// Status mocks base method
func (m *MockWebDriver) Status() (*selenium.Status, error) {
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(*selenium.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status
func (mr *MockWebDriverMockRecorder) Status() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockWebDriver)(nil).Status))
}

// SwitchFrame mocks base method
func (m *MockWebDriver) SwitchFrame(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "SwitchFrame", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SwitchFrame indicates an expected call of SwitchFrame
func (mr *MockWebDriverMockRecorder) SwitchFrame(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwitchFrame", reflect.TypeOf((*MockWebDriver)(nil).SwitchFrame), arg0)
}

// SwitchSession mocks base method
func (m *MockWebDriver) SwitchSession(arg0 string) error {
	ret := m.ctrl.Call(m, "SwitchSession", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SwitchSession indicates an expected call of SwitchSession
func (mr *MockWebDriverMockRecorder) SwitchSession(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwitchSession", reflect.TypeOf((*MockWebDriver)(nil).SwitchSession), arg0)
}

// SwitchWindow mocks base method
func (m *MockWebDriver) SwitchWindow(arg0 string) error {
	ret := m.ctrl.Call(m, "SwitchWindow", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SwitchWindow indicates an expected call of SwitchWindow
func (mr *MockWebDriverMockRecorder) SwitchWindow(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwitchWindow", reflect.TypeOf((*MockWebDriver)(nil).SwitchWindow), arg0)
}

// Title mocks base method
func (m *MockWebDriver) Title() (string, error) {
	ret := m.ctrl.Call(m, "Title")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Title indicates an expected call of Title
func (mr *MockWebDriverMockRecorder) Title() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Title", reflect.TypeOf((*MockWebDriver)(nil).Title))
}

// Wait mocks base method
func (m *MockWebDriver) Wait(arg0 selenium.Condition) error {
	ret := m.ctrl.Call(m, "Wait", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait
func (mr *MockWebDriverMockRecorder) Wait(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockWebDriver)(nil).Wait), arg0)
}

// WaitWithTimeout mocks base method
func (m *MockWebDriver) WaitWithTimeout(arg0 selenium.Condition, arg1 time.Duration) error {
	ret := m.ctrl.Call(m, "WaitWithTimeout", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitWithTimeout indicates an expected call of WaitWithTimeout
func (mr *MockWebDriverMockRecorder) WaitWithTimeout(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitWithTimeout", reflect.TypeOf((*MockWebDriver)(nil).WaitWithTimeout), arg0, arg1)
}

// WaitWithTimeoutAndInterval mocks base method
func (m *MockWebDriver) WaitWithTimeoutAndInterval(arg0 selenium.Condition, arg1, arg2 time.Duration) error {
	ret := m.ctrl.Call(m, "WaitWithTimeoutAndInterval", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitWithTimeoutAndInterval indicates an expected call of WaitWithTimeoutAndInterval
func (mr *MockWebDriverMockRecorder) WaitWithTimeoutAndInterval(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitWithTimeoutAndInterval", reflect.TypeOf((*MockWebDriver)(nil).WaitWithTimeoutAndInterval), arg0, arg1, arg2)
}

// WindowHandles mocks base method
func (m *MockWebDriver) WindowHandles() ([]string, error) {
	ret := m.ctrl.Call(m, "WindowHandles")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WindowHandles indicates an expected call of WindowHandles
func (mr *MockWebDriverMockRecorder) WindowHandles() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WindowHandles", reflect.TypeOf((*MockWebDriver)(nil).WindowHandles))
}

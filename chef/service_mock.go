// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_chef is a generated GoMock package.
package chef

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// sendDeliveryAlert mocks base method
func (m *MockService) sendDeliveryAlert(ctx context.Context, chatId uint32, message string) {
	m.ctrl.Call(m, "sendDeliveryAlert", ctx, chatId, message)
}

// sendDeliveryAlert indicates an expected call of sendDeliveryAlert
func (mr *MockServiceMockRecorder) sendDeliveryAlert(ctx, chatId, message interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sendDeliveryAlert", reflect.TypeOf((*MockService)(nil).sendDeliveryAlert), ctx, chatId, message)
}

// FindNodesFromFriendlyNames mocks base method
func (m *MockService) FindNodesFromFriendlyNames(recipe, environment string, chat uint32) []Node {
	ret := m.ctrl.Call(m, "FindNodesFromFriendlyNames", recipe, environment, chat)
	ret0, _ := ret[0].([]Node)
	return ret0
}

// FindNodesFromFriendlyNames indicates an expected call of FindNodesFromFriendlyNames
func (mr *MockServiceMockRecorder) FindNodesFromFriendlyNames(recipe, environment, chat interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNodesFromFriendlyNames", reflect.TypeOf((*MockService)(nil).FindNodesFromFriendlyNames), recipe, environment, chat)
}

// getAllRecipes mocks base method
func (m *MockService) getAllRecipes() ([]string, error) {
	ret := m.ctrl.Call(m, "getAllRecipes")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getAllRecipes indicates an expected call of getAllRecipes
func (mr *MockServiceMockRecorder) getAllRecipes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getAllRecipes", reflect.TypeOf((*MockService)(nil).getAllRecipes))
}

// getRecipesForGroup mocks base method
func (m *MockService) getRecipesForGroup(group uint32) ([]Recipe, error) {
	ret := m.ctrl.Call(m, "getRecipesForGroup", group)
	ret0, _ := ret[0].([]Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getRecipesForGroup indicates an expected call of getRecipesForGroup
func (mr *MockServiceMockRecorder) getRecipesForGroup(group interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getRecipesForGroup", reflect.TypeOf((*MockService)(nil).getRecipesForGroup), group)
}

// addRecipeToGroup mocks base method
func (m *MockService) addRecipeToGroup(ctx context.Context, group uint32, recipeName, friendlyName string) error {
	ret := m.ctrl.Call(m, "addRecipeToGroup", ctx, group, recipeName, friendlyName)
	ret0, _ := ret[0].(error)
	return ret0
}

// addRecipeToGroup indicates an expected call of addRecipeToGroup
func (mr *MockServiceMockRecorder) addRecipeToGroup(ctx, group, recipeName, friendlyName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addRecipeToGroup", reflect.TypeOf((*MockService)(nil).addRecipeToGroup), ctx, group, recipeName, friendlyName)
}

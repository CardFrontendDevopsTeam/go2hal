// Code generated by protoc-gen-go. DO NOT EDIT.
// source: remote_command.proto

/*
Package telegram is a generated protocol buffer package.

It is generated from these files:
	remote_command.proto

It has these top-level messages:
	RemoteCommandRequest
	RemoteRequest
*/
package remoteTelegramCommands

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RemoteCommandRequest struct {
	Name        string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
}

func (m *RemoteCommandRequest) Reset()                    { *m = RemoteCommandRequest{} }
func (m *RemoteCommandRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoteCommandRequest) ProtoMessage()               {}
func (*RemoteCommandRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RemoteCommandRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RemoteCommandRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type RemoteRequest struct {
	From    string `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *RemoteRequest) Reset()                    { *m = RemoteRequest{} }
func (m *RemoteRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoteRequest) ProtoMessage()               {}
func (*RemoteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RemoteRequest) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *RemoteRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*RemoteCommandRequest)(nil), "telegram.RemoteCommandRequest")
	proto.RegisterType((*RemoteRequest)(nil), "telegram.RemoteRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RemoteCommand service

type RemoteCommandClient interface {
	RegisterCommand(ctx context.Context, in *RemoteCommandRequest, opts ...grpc.CallOption) (RemoteCommand_RegisterCommandClient, error)
}

type remoteCommandClient struct {
	cc *grpc.ClientConn
}

func NewRemoteCommandClient(cc *grpc.ClientConn) RemoteCommandClient {
	return &remoteCommandClient{cc}
}

func (c *remoteCommandClient) RegisterCommand(ctx context.Context, in *RemoteCommandRequest, opts ...grpc.CallOption) (RemoteCommand_RegisterCommandClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RemoteCommand_serviceDesc.Streams[0], c.cc, "/telegram.RemoteCommand/RegisterCommand", opts...)
	if err != nil {
		return nil, err
	}
	x := &remoteCommandRegisterCommandClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RemoteCommand_RegisterCommandClient interface {
	Recv() (*RemoteRequest, error)
	grpc.ClientStream
}

type remoteCommandRegisterCommandClient struct {
	grpc.ClientStream
}

func (x *remoteCommandRegisterCommandClient) Recv() (*RemoteRequest, error) {
	m := new(RemoteRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for RemoteCommand service

type RemoteCommandServer interface {
	RegisterCommand(*RemoteCommandRequest, RemoteCommand_RegisterCommandServer) error
}

func RegisterRemoteCommandServer(s *grpc.Server, srv RemoteCommandServer) {
	s.RegisterService(&_RemoteCommand_serviceDesc, srv)
}

func _RemoteCommand_RegisterCommand_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RemoteCommandRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RemoteCommandServer).RegisterCommand(m, &remoteCommandRegisterCommandServer{stream})
}

type RemoteCommand_RegisterCommandServer interface {
	Send(*RemoteRequest) error
	grpc.ServerStream
}

type remoteCommandRegisterCommandServer struct {
	grpc.ServerStream
}

func (x *remoteCommandRegisterCommandServer) Send(m *RemoteRequest) error {
	return x.ServerStream.SendMsg(m)
}

var _RemoteCommand_serviceDesc = grpc.ServiceDesc{
	ServiceName: "telegram.RemoteCommand",
	HandlerType: (*RemoteCommandServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RegisterCommand",
			Handler:       _RemoteCommand_RegisterCommand_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "remote_command.proto",
}

func init() { proto.RegisterFile("remote_command.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 185 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x29, 0x4a, 0xcd, 0xcd,
	0x2f, 0x49, 0x8d, 0x4f, 0xce, 0xcf, 0xcd, 0x4d, 0xcc, 0x4b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0xe2, 0x28, 0x49, 0xcd, 0x49, 0x4d, 0x2f, 0x4a, 0xcc, 0x55, 0xf2, 0xe1, 0x12, 0x09, 0x02,
	0xab, 0x70, 0x86, 0x28, 0x08, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe2, 0x62, 0xc9,
	0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x85, 0x14, 0xb8, 0xb8,
	0x53, 0x52, 0x8b, 0x93, 0x8b, 0x32, 0x0b, 0x4a, 0x32, 0xf3, 0xf3, 0x24, 0x98, 0xc0, 0x52, 0xc8,
	0x42, 0x4a, 0xb6, 0x5c, 0xbc, 0x10, 0xd3, 0x90, 0x8c, 0x49, 0x2b, 0xca, 0xcf, 0x85, 0x19, 0x03,
	0x62, 0x0b, 0x49, 0x70, 0xb1, 0xe7, 0xa6, 0x16, 0x17, 0x27, 0xa6, 0xa7, 0x42, 0x8d, 0x80, 0x71,
	0x8d, 0xe2, 0x61, 0xda, 0xa1, 0x8e, 0x11, 0xf2, 0xe3, 0xe2, 0x0f, 0x4a, 0x4d, 0xcf, 0x2c, 0x2e,
	0x49, 0x2d, 0x82, 0x09, 0xc9, 0xe9, 0xc1, 0xdc, 0xae, 0x87, 0xcd, 0xe1, 0x52, 0xe2, 0xe8, 0xf2,
	0x50, 0x09, 0x25, 0x06, 0x03, 0xc6, 0x24, 0x36, 0xb0, 0xf7, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x11, 0xe5, 0x6d, 0xe9, 0x16, 0x01, 0x00, 0x00,
}

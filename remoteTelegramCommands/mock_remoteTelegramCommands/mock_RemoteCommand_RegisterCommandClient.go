// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/zamedic/go2hal/remoteTelegramCommands (interfaces: RemoteCommand_RegisterCommandClient)

// Package mock_remoteTelegramCommands is a generated GoMock package.
package mock_remoteTelegramCommands

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	remoteTelegramCommands "github.com/zamedic/go2hal/remoteTelegramCommands"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockRemoteCommand_RegisterCommandClient is a mock of RemoteCommand_RegisterCommandClient interface
type MockRemoteCommand_RegisterCommandClient struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteCommand_RegisterCommandClientMockRecorder
}

// MockRemoteCommand_RegisterCommandClientMockRecorder is the mock recorder for MockRemoteCommand_RegisterCommandClient
type MockRemoteCommand_RegisterCommandClientMockRecorder struct {
	mock *MockRemoteCommand_RegisterCommandClient
}

// NewMockRemoteCommand_RegisterCommandClient creates a new mock instance
func NewMockRemoteCommand_RegisterCommandClient(ctrl *gomock.Controller) *MockRemoteCommand_RegisterCommandClient {
	mock := &MockRemoteCommand_RegisterCommandClient{ctrl: ctrl}
	mock.recorder = &MockRemoteCommand_RegisterCommandClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRemoteCommand_RegisterCommandClient) EXPECT() *MockRemoteCommand_RegisterCommandClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method
func (m *MockRemoteCommand_RegisterCommandClient) CloseSend() error {
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockRemoteCommand_RegisterCommandClientMockRecorder) CloseSend() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockRemoteCommand_RegisterCommandClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockRemoteCommand_RegisterCommandClient) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockRemoteCommand_RegisterCommandClientMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockRemoteCommand_RegisterCommandClient)(nil).Context))
}

// Header mocks base method
func (m *MockRemoteCommand_RegisterCommandClient) Header() (metadata.MD, error) {
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockRemoteCommand_RegisterCommandClientMockRecorder) Header() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockRemoteCommand_RegisterCommandClient)(nil).Header))
}

// Recv mocks base method
func (m *MockRemoteCommand_RegisterCommandClient) Recv() (*remoteTelegramCommands.RemoteRequest, error) {
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*remoteTelegramCommands.RemoteRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockRemoteCommand_RegisterCommandClientMockRecorder) Recv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockRemoteCommand_RegisterCommandClient)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockRemoteCommand_RegisterCommandClient) RecvMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockRemoteCommand_RegisterCommandClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockRemoteCommand_RegisterCommandClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method
func (m *MockRemoteCommand_RegisterCommandClient) SendMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockRemoteCommand_RegisterCommandClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockRemoteCommand_RegisterCommandClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockRemoteCommand_RegisterCommandClient) Trailer() metadata.MD {
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockRemoteCommand_RegisterCommandClientMockRecorder) Trailer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockRemoteCommand_RegisterCommandClient)(nil).Trailer))
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/zamedic/go2hal/remoteTelegramCommands (interfaces: RemoteCommandClient)

// Package mock_remoteTelegramCommands is a generated GoMock package.
package mock_remoteTelegramCommands

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	remoteTelegramCommands "github.com/zamedic/go2hal/remoteTelegramCommands"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockRemoteCommandClient is a mock of RemoteCommandClient interface
type MockRemoteCommandClient struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteCommandClientMockRecorder
}

// MockRemoteCommandClientMockRecorder is the mock recorder for MockRemoteCommandClient
type MockRemoteCommandClientMockRecorder struct {
	mock *MockRemoteCommandClient
}

// NewMockRemoteCommandClient creates a new mock instance
func NewMockRemoteCommandClient(ctrl *gomock.Controller) *MockRemoteCommandClient {
	mock := &MockRemoteCommandClient{ctrl: ctrl}
	mock.recorder = &MockRemoteCommandClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRemoteCommandClient) EXPECT() *MockRemoteCommandClientMockRecorder {
	return m.recorder
}

// RegisterCommand mocks base method
func (m *MockRemoteCommandClient) RegisterCommand(arg0 context.Context, arg1 *remoteTelegramCommands.RemoteCommandRequest, arg2 ...grpc.CallOption) (remoteTelegramCommands.RemoteCommand_RegisterCommandClient, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterCommand", varargs...)
	ret0, _ := ret[0].(remoteTelegramCommands.RemoteCommand_RegisterCommandClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterCommand indicates an expected call of RegisterCommand
func (mr *MockRemoteCommandClientMockRecorder) RegisterCommand(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCommand", reflect.TypeOf((*MockRemoteCommandClient)(nil).RegisterCommand), varargs...)
}

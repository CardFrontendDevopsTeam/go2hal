// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package mock_telegram is a generated GoMock package.
package telegram

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// SetState mocks base method
func (m *MockStore) SetState(user int, chat int64, state string, field []string) error {
	ret := m.ctrl.Call(m, "SetState", user, chat, state, field)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetState indicates an expected call of SetState
func (mr *MockStoreMockRecorder) SetState(user, chat, state, field interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetState", reflect.TypeOf((*MockStore)(nil).SetState), user, chat, state, field)
}

// getState mocks base method
func (m *MockStore) getState(user int, chat int64) State {
	ret := m.ctrl.Call(m, "getState", user, chat)
	ret0, _ := ret[0].(State)
	return ret0
}

// getState indicates an expected call of getState
func (mr *MockStoreMockRecorder) getState(user, chat interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getState", reflect.TypeOf((*MockStore)(nil).getState), user, chat)
}

// addBot mocks base method
func (m *MockStore) addBot(chat int64) (uint32, error) {
	ret := m.ctrl.Call(m, "addBot", chat)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// addBot indicates an expected call of addBot
func (mr *MockStoreMockRecorder) addBot(chat interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addBot", reflect.TypeOf((*MockStore)(nil).addBot), chat)
}

// GetRoomKey mocks base method
func (m *MockStore) GetRoomKey(chat uint32) (int64, error) {
	ret := m.ctrl.Call(m, "GetRoomKey", chat)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomKey indicates an expected call of GetRoomKey
func (mr *MockStoreMockRecorder) GetRoomKey(chat interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomKey", reflect.TypeOf((*MockStore)(nil).GetRoomKey), chat)
}

// GetUUID mocks base method
func (m *MockStore) GetUUID(chat int64) (uint32, error) {
	ret := m.ctrl.Call(m, "GetUUID", chat)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUUID indicates an expected call of GetUUID
func (mr *MockStoreMockRecorder) GetUUID(chat interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUUID", reflect.TypeOf((*MockStore)(nil).GetUUID), chat)
}

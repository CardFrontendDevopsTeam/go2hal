// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_callout is a generated GoMock package.
package callout

import (
	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// InvokeCallout mocks base method
func (m *MockService) InvokeCallout(ctx context.Context, title, message string) error {
	ret := m.ctrl.Call(m, "InvokeCallout", ctx, title, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvokeCallout indicates an expected call of InvokeCallout
func (mr *MockServiceMockRecorder) InvokeCallout(ctx, title, message interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeCallout", reflect.TypeOf((*MockService)(nil).InvokeCallout), ctx, title, message)
}

// getFirstCall mocks base method
func (m *MockService) getFirstCall(ctx context.Context) (string, string, error) {
	ret := m.ctrl.Call(m, "getFirstCall", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// getFirstCall indicates an expected call of getFirstCall
func (mr *MockServiceMockRecorder) getFirstCall(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getFirstCall", reflect.TypeOf((*MockService)(nil).getFirstCall), ctx)
}
